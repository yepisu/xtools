(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5155],{55343:function(e,l,t){"use strict";var a=t(64836);l.Z=void 0;var n=a(t(64938)),i=t(85893),r=(0,n.default)((0,i.jsx)("path",{d:"M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"}),"Fullscreen");l.Z=r},31208:function(e,l,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/git",function(){return t(52943)}])},43197:function(e,l,t){"use strict";var a=t(85893),n=t(70671),i=t(88613),r=t(47023),o=t(37375),c=t(55343),u=t(51233),s=t(5616),b=t(15861),d=t(25662),g=t(67294);l.Z=e=>{let{children:l,sx:t,fullScreen:m=!0}=e,{path:h}=(0,i.hI)(),[v]=g.useState(o.Z.find(e=>e.path===h));return(0,g.useEffect)(()=>{let e=e=>{if(!(document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement||document.msFullscreenElement)){let e=document.getElementById("fullscreen-element"),l=document.getElementById("rivers-header");e&&(e.style.position="unset",e.style.inset="0",e.style.maxWidth="unset",e.style.padding="0",l&&(l.style.display="block"))}};return document.addEventListener("fullscreenchange",e),document.addEventListener("webkitfullscreenchange",e),document.addEventListener("mozfullscreenchange",e),document.addEventListener("MSFullscreenChange",e),()=>{document.removeEventListener("fullscreenchange",e),document.removeEventListener("webkitfullscreenchange",e),document.removeEventListener("mozfullscreenchange",e),document.removeEventListener("MSFullscreenChange",e)}},[]),(0,a.jsxs)(u.Z,{sx:{px:"50px",py:2,overflow:"auto",flex:1,borderRadius:"8px",background:"#fff",boxShadow:"0px 0px 2px 0px rgba(145,158,171,0.2), 0px 12px 24px -4px rgba(145,158,171,0.12)",...t},children:[(0,a.jsxs)(u.Z,{direction:"row",justifyContent:"space-between",children:[(0,a.jsx)(s.Z,{children:(0,a.jsx)(b.Z,{sx:{mb:"0px",fontWeight:600,color:n.Z2,fontSize:"20px"},gutterBottom:!0,variant:"subtitle1",component:"div",children:null==v?void 0:v.label})}),(0,a.jsx)(u.Z,{direction:"row",sx:{fontFamily:"Mono"},children:r.i.filter(e=>null==v?void 0:v.tags.includes(e.name)).map(e=>(0,a.jsx)(s.Z,{sx:{height:"24px",lineHeight:"24px",fontSize:"12px",background:"rgba(52,90,255,0.1)",color:"#345AFF",px:1,borderRadius:1,ml:1},children:e.label},e.name))})]}),(0,a.jsxs)(u.Z,{direction:"row",alignItems:"center",justifyContent:"space-between",sx:{position:"relative",width:"100%",alignSelf:"stretch",mb:"24px"},children:[(0,a.jsx)(b.Z,{variant:"caption",sx:{display:"inline-block",maxWidth:"100%",pl:"6px",color:"rgba(11,37,98,0.5)",background:"rgba(11,37,98,0.04)",borderRadius:1,lineHeight:"24px"},children:null==v?void 0:v.subTitle}),m?(0,a.jsx)(d.Z,{size:"small",onClick:()=>{let e=document.body;new Promise(l=>{(null==e?void 0:e.requestFullscreen)?l(e.requestFullscreen()):(null==e?void 0:e.mozRequestFullScreen)?l(null==e?void 0:e.mozRequestFullScreen()):(null==e?void 0:e.webkitRequestFullscreen)?l(null==e?void 0:e.webkitRequestFullscreen()):(null==e?void 0:e.msRequestFullscreen)&&l(null==e?void 0:e.msRequestFullscreen())}).then(()=>{let e=document.getElementById("fullscreen-element"),l=document.getElementById("rivers-header");e&&(e.style.position="fixed",e.style.inset="0",e.style.maxWidth="100vw",e.style.background="#fff",e.style.padding="84px 14px 14px 14px",l&&(l.style.display="none"))})},sx:{borderRadius:"4px",height:"24px"},variant:"outlined",startIcon:(0,a.jsx)(c.Z,{}),children:"全屏"}):null]}),(0,a.jsx)(u.Z,{id:"fullscreen-element",sx:{gap:"18px",maxWidth:"1020px",fontFamily:"Mono",mx:"auto",flex:1,width:"100%"},children:l})]})}},52943:function(e,l,t){"use strict";t.r(l);var a=t(85893),n=t(43197),i=t(5616),r=t(51233),o=t(59268);l.default=()=>{let e=[{title:"Git 指令",dataIndex:"label",width:300,render:e=>(0,a.jsx)(i.Z,{sx:{whiteSpace:"pre-line"},children:e})},{title:"命令说明",dataIndex:"value"}];return(0,a.jsx)(n.Z,{children:(0,a.jsxs)(i.Z,{sx:{pb:2,".rc-table":{border:"1px solid #eee",borderRadius:"4px"},".rc-table table":{width:"100%",borderCollapse:"collapse"},".rc-table-thead .rc-table-cell":{textAlign:"left",paddingLeft:"24px",backgroundColor:"#eee",fontSize:"12px",height:"28px",fontWeight:500,fontFamily:"Mono"},".rc-table-tbody .rc-table-row":{borderBottom:"1px solid #eee"},".rc-table-tbody .rc-table-cell":{paddingLeft:"24px",fontSize:"14px",paddingTop:"12px",paddingBottom:"12px",fontFamily:"Mono"}},children:[[{label:"创建命令 Create",value:[{label:"git clone <url>",value:"克隆远程仓库"},{label:"git init",value:"初始化本地 git 仓库（即创建新的本地仓库）"}]},{label:"本地更改 Local Changes",value:[{label:"git status",value:"查看当前分支状态"},{label:"git diff",value:"查看已跟踪文件的变更"},{label:"git add <file>",value:"将指定的文件添加到暂存区"},{label:"git add .",value:"将所有有变更的文件添加到暂存区"},{label:"git commit -a",value:"提交所有本地修改"},{label:'git commit -m "xxx"',value:"把已添加至暂存区的文件执行提交，并以 xxx 作为本次提交的描述"},{label:'git commit --amend -m "xxx"',value:"修改上一次提交（请勿用该命令修改已发布的提交）"},{label:'git commit -am "xxx"',value:'该命令是 git add . 和 git commit -m "xxx" 的快捷方式'},{label:"git stash",value:"暂存当前修改，将所有置为 HEAD 状态"},{label:"git stash list",value:"查看所有暂存列表"},{label:"git stash push",value:"把当前工作区的文件暂存到临时空间"},{label:"git stash pop",value:"把文件从临时空间中恢复到当前工作区"}]},{label:"提交历史 Commit History",value:[{label:"git log",value:"查看提交日志"},{label:"git log -n",value:"显示 n 行日志，n 为整数"},{label:"git log --stat",value:"查看本地提交日志"},{label:"git show <commit>",value:"查看提交日志及相关变动文件"},{label:"git show HEAD",value:"查看 HEAD 提交日志"},{label:"git show HEAD^",value:"查看 HEAD 的上一个版本提交日志。另外，git show HEAD^^ 是查看上 2 个版本的提交日志；git show HEAD^5 是查看上 5 个版本的提交日志"},{label:"git blame <file>",value:"对于指定文件，逐行显示提交的哈希ID、提交者、提交日期以及修改的内容"},{label:"git whatchanged",value:"显示提交历史，以及每次提交变更的文件"}]},{label:"分支和标签 Branches & Tags",value:[{label:"git branch",value:"查看本地分支"},{label:"git branch -r",value:"查看远程分支"},{label:"git branch -a",value:"查看所有分支（本地和远程）"},{label:"git branch --merged",value:"查看所有分支已合并到当前分支的分支"},{label:"git branch --no-merged",value:"查看所有分支未合并到当前分支的分支"},{label:"git branch -m <new-branch>",value:"把当前分支的名称改成 new-branch；如果 new-branch 已存在，将不会执行改名"},{label:"git branch -M <new-branch>",value:"强制把当前分支的名称改成 new-branch（即使 new-branch 已存在）"},{label:"git branch -m <old-branch> <new-branch>",value:"把分支 old-branch 的名称改成 new-branch，如果 new-branch 已存在，将不会执行改名"},{label:"git branch -M <old-branch> <new-branch>",value:"强制把分支 old-branch 的名称改成 new-branch（即使 new-branch 已存在）"},{label:"git checkout <branch-name>",value:"切换到 branch-name 分支"},{label:"git branch <new-branch>",value:"新建分支（也可以用 git checkout -b <new-branch>）"},{label:"git branch --track <new> <remote>",value:"基于远程分支创建一个新分支，同 git checkout --track <remote/branch>"},{label:"git branch -d <branch-name>",value:"删除本地分支"},{label:"git tag",value:"列出所有本地标签"},{label:"git tag <tag-name>",value:"基于最新的提交创建标签"},{label:"git tag -d <tag-name>",value:"删除标签"}]},{label:"删除命令 Remove",value:[{label:"git rm <file>",value:"删除文件（将从磁盘中删除文件）"},{label:"git rm -r <directory>",value:"递归删除指定目录下的文件"},{label:"git rm --cached <file>",value:"停止跟踪文件，不会从磁盘中删除"}]},{label:"合并和衍合 Merge & Rebase",value:[{label:"git merge <branch>",value:"合并指定分支到当前分支，保留两个"},{label:"git rebase <branch>",value:"合并指定分支到当前分支，只保留一个"},{label:"git rebase --abort",value:"终止 rebase 操作，即回到执行 rebase 之前的状态"},{label:"git rebase --continue",value:"解决冲突后继续执行 rebase"},{label:"git mergetool",value:"使用配置文件指定的 mergetool 解决冲突"},{label:"git add <resolved-file>\ngit rm <resolved-file>\n",value:"使用编辑器手动解决文件冲突，并在冲突解决后，把文件标记为 resolved"}]},{label:"撤销命令 Undo",value:[{label:"git reset --hard HEAD",value:"将当前版本重置为 HEAD（用于 merge 失败的时候）"},{label:"git reset <commit>",value:"将当前版本重置为某一个提交状态，代码不变"},{label:"git reset --hard <commit>",value:"强制将当前版本重置为某一个提交状态，并丢弃那个状态之后的所有修改（请谨慎使用该命令）"},{label:"git reset --merge <commit>",value:"将当前版本重置为某一个提交状态，并保留版本库中不同的文件"},{label:"git reset --keep <commit>",value:"将当前版本重置为某一个提交状态，并保留未提交的本地修改"},{label:"git revert <commit>",value:"撤销提交"},{label:"git restore <file>",value:"丢弃指定文件的修改信息，即恢复到文件修改前的状态"},{label:"git checkout -- <file>",value:"同 git restore <file> 命令"},{label:"git checkout HEAD <file>",value:"对于指定文件，丢弃该文件的本地修改信息"},{label:"git clean",value:"清除工作目录中未跟踪的文件"}]},{label:"配置命令 Git Configuration",value:[{label:"git clean -n",value:"列出哪些文件将从工作目录中删除"},{label:"git config --list",value:"列出当前 Git 配置"},{label:"git config --global user.name <name>",value:"把参数 name 设置为当前用户使用的提交者的姓名；如果未指定 name 参数，则显示当前用户使用的提交者姓名"},{label:"git config --global user.email <email>",value:"把参数 email 设置为当前用户使用的提交者的邮箱；如果未指定 email 参数，则显示当前用户使用的提交者邮箱"},{label:"git config --global alias.<alias> <command>",value:"为 Git 命令创建全局的别名。比如，执行 alias.glog log --graph --oneline --decorate 命令后，git glog 就相当于 git log --graph --oneline --decorate。"},{label:"git config --system core.editor <editor>",value:"对于本机的所有用户，设置命令使用的编辑器（比如 vim）"},{label:"git config --global --edit",value:"在编辑器中打开全局配置文件（用于手动修改）"},{label:"git config --global color.ui auto",value:"使用不同的颜色渲染 Git 命令的输出结果"}]},{label:"其他命令 Other",value:[{label:"git var -l",value:"列出 Git 环境变量"},{label:"git help <command>",value:"显示指定命令的帮助（将呼出该命令的 man 文件）"}]}].map(l=>(0,a.jsxs)(i.Z,{children:[(0,a.jsx)(i.Z,{sx:{my:2,fontWeight:500},children:l.label}),(0,a.jsx)(o.ZP,{columns:e,data:l.value,rowKey:"label"})]},l.label)),(0,a.jsx)(i.Z,{sx:{my:2,fontWeight:500},children:"相关术语"}),(0,a.jsx)(i.Z,{sx:{my:2,fontSize:"14px"},children:"下面列出了 Git 常见的术语，通过这些术语，可以更好地了解 Git 版本控制系统。"}),(0,a.jsxs)(r.Z,{sx:{fontSize:"14px",ml:3},component:"ul",children:[(0,a.jsx)(i.Z,{component:"li",children:"git：一个开源的、分布式的版本控制系统"}),(0,a.jsx)(i.Z,{component:"li",children:"commit：提交，指一个 Git 对象，该对象是整个仓库以 SHA 表示的快照"}),(0,a.jsx)(i.Z,{component:"li",children:"branch：分支，一个轻量的、可移动的指向一个 commit 的指针"}),(0,a.jsx)(i.Z,{component:"li",children:"clone：克隆，指在本地创建一份远程仓库的副本"}),(0,a.jsx)(i.Z,{component:"li",children:"remote：远程仓库，是指托管在 GitHub、GitLab 等地方的公共（或私有）仓库，团队所有成员均可向该仓库提交修改"}),(0,a.jsx)(i.Z,{component:"li",children:"fork：创建一个其他用户的仓库的副本"}),(0,a.jsx)(i.Z,{component:"li",children:"pull request：简称 PR，指针对某个仓库，请求别人拉取并合并你的修改。通常，发起 pull request 的人都是从被请求人那里 clone 代码"}),(0,a.jsx)(i.Z,{component:"li",children:"HEAD：表示当前工作区，使用 git checkout命令，可以把 HEAD 指针切换到不同的分支、标签和 commit 上"})]})]})})}}},function(e){e.O(0,[9268,9774,2888,179],function(){return e(e.s=31208)}),_N_E=e.O()}]);